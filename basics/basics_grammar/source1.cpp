#include <iostream>
using namespace std;
// 函数声明 
// static and external variable is two important kinds of variable


#define LIGHT 10



int count1 = 10; /* 全局变量 */

int main()
{
	int a = 4, b = 5, c;
	count1 = a + b;

	cout << count1 <<endl;
	c=a << 2;
	cout << a << endl;
	cout << c << endl;
	a <<= a;
	cout << a << endl;
	/*
	=	简单的赋值运算符，把右边操作数的值赋给左边操作数	C = A + B 将把 A + B 的值赋给 C
	+=	加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数	C += A 相当于 C = C + A
	-=	减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数	C -= A 相当于 C = C - A
	*=	乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数	C *= A 相当于 C = C * A
	/=	除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数	C /= A 相当于 C = C / A
	%=	求模且赋值运算符，求两个操作数的模赋值给左边操作数	C %= A 相当于 C = C % A
	<<=	左移且赋值运算符	C <<= 2 等同于 C = C << 2
	>>=	右移且赋值运算符	C >>= 2 等同于 C = C >> 2
	&=	按位与且赋值运算符	C &= 2 等同于 C = C & 2
	^=	按位异或且赋值运算符	C ^= 2 等同于 C = C ^ 2
	|=	按位或且赋值运算符	C |= 2 等同于 C = C | 2

	&	如果同时存在于两个操作数中，二进制 AND 运算符复制一位到结果中。	(A & B) 将得到 12，即为 0000 1100
	|	如果存在于任一操作数中，二进制 OR 运算符复制一位到结果中。	(A | B) 将得到 61，即为 0011 1101
	^	如果存在于其中一个操作数中但不同时存在于两个操作数中，二进制异或运算符复制一位到结果中。	(A ^ B) 将得到 49，即为 0011 0001
	~	二进制补码运算符是一元运算符，具有"翻转"位效果，即0变成1，1变成0。	(~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。
	<<	二进制左移运算符。左操作数的值向左移动右操作数指定的位数。	A << 2 将得到 240，即为 1111 0000
	>>	二进制右移运算符。左操作数的值向右移动右操作数指定的位数。	A >> 2 将得到 15，即为 0000 1111


	*/


	cout << LIGHT << endl;


	return 0;
}

